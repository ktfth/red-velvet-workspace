{
	"info": {
		"_postman_id": "bd1fe6cf-24a1-4514-b211-c52c62ba9c9e",
		"name": "Banco Digital API",
		"description": "API do Banco Digital com autenticação JWT via Kong Gateway",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "6394192"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Gerar Token JWT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"if (jsonData.data && jsonData.data.length > 0) {",
									"    pm.collectionVariables.set('key', jsonData.data[0].key);",
									"    pm.collectionVariables.set('secret', jsonData.data[0].secret);",
									"",
									"    var exp = Math.floor(Date.now() / 1000) + 3600;",
									"    var payload = {",
									"        iss: pm.collectionVariables.get('key'),",
									"        exp: exp",
									"    };",
									"",
									"    var header = {",
									"        alg: 'HS256',",
									"        typ: 'JWT'",
									"    };",
									"",
									"    var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header));",
									"    var encodedHeader = base64url(stringifiedHeader);",
									"",
									"    var stringifiedPayload = CryptoJS.enc.Utf8.parse(JSON.stringify(payload));",
									"    var encodedPayload = base64url(stringifiedPayload);",
									"",
									"    var token = encodedHeader + '.' + encodedPayload;",
									"",
									"    var signature = CryptoJS.HmacSHA256(token, pm.collectionVariables.get('secret'));",
									"    var encodedSignature = base64url(signature);",
									"",
									"    var jwt = token + '.' + encodedSignature;",
									"    ",
									"    pm.collectionVariables.set('jwt_token', jwt);",
									"    console.log('JWT Token gerado com sucesso');",
									"} else {",
									"    console.error('Erro: Credenciais JWT não encontradas');",
									"}",
									"",
									"function base64url(source) {",
									"    var encodedSource = CryptoJS.enc.Base64.stringify(source);",
									"    encodedSource = encodedSource.replace(/=+$/, '');",
									"    encodedSource = encodedSource.replace(/\\+/g, '-');",
									"    encodedSource = encodedSource.replace(/\\//g, '_');",
									"    return encodedSource;",
									"}",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Data array is present and contains the expected number of elements\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.be.an('array').and.to.have.lengthOf(1);",
									"});",
									"",
									"",
									"pm.test(\"Validate the 'created_at' field is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.data).to.be.an('array').that.is.not.empty;",
									"    ",
									"    responseData.data.forEach(function(item) {",
									"        pm.expect(item.created_at).to.be.a('number').that.is.gte(0);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{admin_api_url}}/consumers/banco-digital-app/jwt",
							"host": [
								"{{admin_api_url}}"
							],
							"path": [
								"consumers",
								"banco-digital-app",
								"jwt"
							]
						},
						"description": "Obtém credenciais JWT do Kong Gateway e gera um token válido"
					},
					"response": []
				}
			]
		},
		{
			"name": "Conta",
			"item": [
				{
					"name": "Criar Conta",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Success field should exist and be true\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.have.property('success', true);",
									"});",
									"",
									"",
									"pm.test(\"Data object has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist.and.to.be.an('object');",
									"    pm.expect(responseData.data).to.have.property('id');",
									"    pm.expect(responseData.data).to.have.property('type');",
									"    pm.expect(responseData.data).to.have.property('number');",
									"    pm.expect(responseData.data).to.have.property('status');",
									"    pm.expect(responseData.data).to.have.property('balance');",
									"    pm.expect(responseData.data).to.have.property('created_at');",
									"    pm.expect(responseData.data).to.have.property('updated_at');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"titular\": \"João Silva\",\n    \"tipo\": \"corrente\",\n    \"saldo_inicial\": 1000.00\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/conta/criar",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"conta",
								"criar"
							]
						},
						"description": "Cria uma nova conta bancária"
					},
					"response": []
				},
				{
					"name": "Alterar Status da Conta",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Success field should exist and be a boolean\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.have.property('success').that.is.a('boolean');",
									"});",
									"",
									"",
									"pm.test(\"Data object has required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.be.an('object');",
									"    pm.expect(responseData.data).to.have.property('id');",
									"    pm.expect(responseData.data).to.have.property('type');",
									"    pm.expect(responseData.data).to.have.property('number');",
									"    pm.expect(responseData.data).to.have.property('status');",
									"    pm.expect(responseData.data).to.have.property('balance');",
									"    pm.expect(responseData.data).to.have.property('created_at');",
									"    pm.expect(responseData.data).to.have.property('updated_at');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"conta_id\": \"{{conta_id}}\",\n    \"status\": \"buzz\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/conta/status",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"conta",
								"status"
							]
						},
						"description": "Altera o status de uma conta (ativa/bloqueada)"
					},
					"response": []
				},
				{
					"name": "Depositar",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - id, message, and valor\", function () {",
									"    const res = pm.response.json();",
									"    ",
									"    pm.expect(res.data).to.be.an('object');",
									"    pm.expect(res.data).to.have.property('id');",
									"    pm.expect(res).to.have.property('message');",
									"    pm.expect(res.data).to.have.property('amount');",
									"});",
									"",
									"",
									"pm.test(\"ID is a non-empty string\", function () {",
									"    const res = pm.response.json();",
									"    ",
									"    pm.expect(res).to.be.an('object');",
									"    pm.expect(res.data.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"ID should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"conta_id\": \"{{conta_id}}\",\n    \"valor\": 500.00\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/conta/depositar",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"conta",
								"depositar"
							]
						},
						"description": "Realiza um depósito na conta"
					},
					"response": []
				},
				{
					"name": "Sacar",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - id, message, and valor\", function () {",
									"    const res = pm.response.json();",
									"    ",
									"    pm.expect(res).to.be.an('object');",
									"    pm.expect(res.data).to.have.property('id');",
									"    pm.expect(res).to.have.property('message');",
									"    pm.expect(res.data).to.have.property('amount');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"conta_id\": \"{{conta_id}}\",\n    \"valor\": 100.00,\n    \"categoria\": \"Despesas\",\n    \"descricao\": \"Saque\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/conta/sacar",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"conta",
								"sacar"
							]
						},
						"description": "Realiza um saque da conta"
					},
					"response": []
				},
				{
					"name": "Configurar Cheque Especial",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - success, data, and message\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('success');",
									"    pm.expect(responseData).to.have.property('data');",
									"    pm.expect(responseData).to.have.property('message');",
									"});",
									"",
									"",
									"pm.test(\"Data object should exist and be an object\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.data).to.exist.and.to.be.an('object');",
									"});",
									"",
									"",
									"pm.test(\"Limit is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.data.limite).to.be.a('number');",
									"    pm.expect(responseData.data.limite).to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"conta_id\": \"{{conta_id}}\",\n    \"novo_limite\": 1000.00\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/conta/cheque-especial",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"conta",
								"cheque-especial"
							]
						},
						"description": "Configura o limite do cheque especial"
					},
					"response": []
				},
				{
					"name": "Obter Notificações",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"conta_id\": \"{{conta_id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/conta/notificacoes",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"conta",
								"notificacoes"
							]
						},
						"description": "Obtém as notificações de uma conta"
					},
					"response": []
				}
			]
		},
		{
			"name": "Cartão",
			"item": [
				{
					"name": "Criar Cartão",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - id, limite, and message\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('limite');",
									"    pm.expect(responseData).to.have.property('message');",
									"});",
									"",
									"",
									"pm.test(\"Id is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Limit is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.limite).to.be.a('number');",
									"    pm.expect(responseData.limite).to.be.at.least(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"conta_id\": \"{{conta_id}}\",\n    \"limite\": 300\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/cartao/criar",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"cartao",
								"criar"
							]
						},
						"description": "Cria um novo cartão"
					},
					"response": []
				},
				{
					"name": "Alterar Status do Cartão",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - message and status\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('message');",
									"    pm.expect(responseData).to.have.property('status');",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Status is a valid status code\", function () {",
									"  const responseData = pm.response.json();",
									"  pm.expect(responseData.status).to.be.a('string').and.to.match(/^(pending|processing|completed|cancelled)$/);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"cartao_id\": \"{{cartao_id}}\",\n    \"status\": \"bloqueado\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/cartao/status",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"cartao",
								"status"
							]
						},
						"description": "Altera o status do cartão (ativo/bloqueado)"
					},
					"response": []
				},
				{
					"name": "Alterar Limite do Cartão",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - limite and message\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.limite).to.exist;",
									"    pm.expect(responseData.message).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Limite is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.limite).to.be.a('number');",
									"    pm.expect(responseData.limite).to.be.at.least(0, \"Limite should be a non-negative integer\");",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"cartao_id\": \"{{cartao_id}}\",\n    \"limite\": 5000.00\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/cartao/limite",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"cartao",
								"limite"
							]
						},
						"description": "Altera o limite do cartão"
					},
					"response": []
				},
				{
					"name": "Realizar Compra",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - id, message, and valor\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData).to.have.property('id');",
									"  pm.expect(responseData).to.have.property('message');",
									"  pm.expect(responseData).to.have.property('valor');",
									"});",
									"",
									"",
									"pm.test(\"ID is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"ID should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Valor is a non-negative number\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.valor).to.be.a('number');",
									"  pm.expect(responseData.valor).to.be.at.least(0, \"Valor should be a non-negative number\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"conta_id\": \"{{conta_id}}\",\n    \"cartao_id\": \"{{cartao_id}}\",\n    \"valor\": 150.00\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/cartao/comprar",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"cartao",
								"comprar"
							]
						},
						"description": "Realiza uma compra com o cartão"
					},
					"response": []
				},
				{
					"name": "Criar Cartão Virtual",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - id, message, and numero\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('message');",
									"    pm.expect(responseData).to.have.property('numero');",
									"});",
									"",
									"",
									"pm.test(\"Id is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Numero is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.numero).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"cartao_id\": \"{{cartao_id}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/cartao/virtual",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"cartao",
								"virtual"
							]
						},
						"description": "Cria um cartão virtual vinculado ao cartão físico"
					},
					"response": []
				}
			]
		},
		{
			"name": "PIX",
			"item": [
				{
					"name": "Gerar QR Code",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  ['id', 'account_id', 'amount', 'description', 'qr_code', 'expires_at', 'created_at'].forEach(function(field) {",
									"    pm.expect(responseData).to.have.property(field);",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Amount is a non-negative number\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.qrcode.amount).to.be.a('number');",
									"    pm.expect(responseData.qrcode.amount).to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"Expires_at is in a valid date format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.qrcode.expires_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);",
									"});",
									"",
									"",
									"pm.test(\"Valor is a non-negative number\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.valor).to.be.a('number');",
									"    pm.expect(responseData.valor).to.be.at.least(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"conta_id\": \"{{conta_id}}\",\n    \"valor\": 50.00,\n    \"descricao\": \"Pagamento PIX\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/pix/qrcode",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"pix",
								"qrcode"
							]
						},
						"description": "Gera um QR Code para recebimento via PIX"
					},
					"response": []
				},
				{
					"name": "Cancelar PIX",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response has the required fields - id and message\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.exist;",
									"    pm.expect(responseData.message).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Id is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"pix_id\": \"{{pix_id}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/pix/cancelar",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"pix",
								"cancelar"
							]
						},
						"description": "Cancela uma transação PIX"
					},
					"response": []
				},
				{
					"name": "Registrar",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('chave');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('message');",
									"    pm.expect(responseData).to.have.property('tipo');",
									"});",
									"",
									"",
									"pm.test(\"Chave, id, message, and tipo are not empty strings\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.chave).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"  pm.expect(responseData.tipo).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Message field contains a meaningful message\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.message).to.be.a('string').and.to.not.be.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"conta_id\": \"{{conta_id}}\",\r\n    \"tipo\": \"QRDN\",\r\n    \"chave\": \"john@test.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/pix/registrar",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"pix",
								"registrar"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{jwt_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"if (!pm.collectionVariables.get('jwt_token')) {",
					"    console.log('JWT Token não encontrado. Execute a requisição \"Gerar Token JWT\" primeiro.');",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "api_url",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "admin_api_url",
			"value": "http://localhost:8001",
			"type": "string"
		},
		{
			"key": "jwt_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "conta_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "cartao_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "pix_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "key",
			"value": "",
			"type": "string"
		},
		{
			"key": "secret",
			"value": "",
			"type": "string"
		}
	]
}